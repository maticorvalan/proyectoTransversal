/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package vistas;

import entidades.Materia;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import persistencia.Conexion;
import persistencia.MateriaData;

/**
 *
 * @author El Angel
 */
public class VistaMateria extends javax.swing.JInternalFrame {
    private Conexion conexion = new Conexion("jdbc:mysql://localhost/universidad", "root", "");
    private MateriaData materiaData = new MateriaData(conexion);
   
    public VistaMateria() {
        initComponents();
        armarTabla();
        cargarFilas();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jtNombre = new javax.swing.JTextField();
        jtDescripcion = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jbActualzar = new javax.swing.JButton();
        jcbEstado = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableMateria = new javax.swing.JTable();
        jbSalir = new javax.swing.JButton();
        jbGuardar = new javax.swing.JButton();
        jbBorrar = new javax.swing.JButton();

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jLabel1.setText("Materia");

        jLabel2.setText("Nombre ;");

        jLabel3.setText("Descripcion :");

        jLabel4.setText("Estado :");

        jbActualzar.setText("Actualizar");
        jbActualzar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbActualzarActionPerformed(evt);
            }
        });

        jTableMateria.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTableMateria.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableMateriaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableMateria);

        jbSalir.setText("Salir");
        jbSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSalirActionPerformed(evt);
            }
        });

        jbGuardar.setText("Guardar");
        jbGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbGuardarActionPerformed(evt);
            }
        });

        jbBorrar.setText("Borrar");
        jbBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbBorrarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(292, 292, 292)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jbSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel2)
                                .addComponent(jLabel3)
                                .addComponent(jLabel4))
                            .addGap(24, 24, 24)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jtNombre)
                                .addComponent(jcbEstado)
                                .addComponent(jtDescripcion, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(50, 50, 50)
                            .addComponent(jbGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 494, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jbActualzar, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                    .addComponent(jbBorrar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(37, 37, 37))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(76, 76, 76)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jtDescripcion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jcbEstado))
                                .addGap(36, 36, 36)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(102, 102, 102)
                                .addComponent(jbActualzar, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(33, 33, 33)
                                .addComponent(jbBorrar, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addComponent(jbSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(89, 89, 89)
                        .addComponent(jbGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbGuardarActionPerformed
        
        String nombre = jtNombre.getText();
        String descripcion = jtDescripcion.getText();
        boolean estado = jcbEstado.isSelected();
        boolean validacion=false;
        if (nombre.equals("")) {
            JOptionPane.showMessageDialog(this, "Falta completar el campo Nombre");
            validacion=true;
        }else if (descripcion.equals("")){
            JOptionPane.showMessageDialog(this, "Falta completar el campo Descripcion");
            validacion=true;
        }else if (!estado) {
            
         int respuesta = JOptionPane.showConfirmDialog(null, "¿Deseas guardar la Materia con el Estado en false?", "Confirmación", JOptionPane.OK_CANCEL_OPTION);

            // Verificar la respuesta del usuario
            if (respuesta == JOptionPane.OK_OPTION) {
                System.out.println("El usuario seleccionó 'Aceptar'.");
            } else if (respuesta == JOptionPane.CANCEL_OPTION) {
                System.out.println("El usuario selecciono Cancelar.");
                validacion=true;
            }
        }
        if (!validacion) {
            materiaData.guardarMateria(new Materia(nombre, descripcion, estado));
            borrarFilasTablas();
            cargarFilas();
            limpiarCampos();
        }
    }//GEN-LAST:event_jbGuardarActionPerformed

    private void jbBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbBorrarActionPerformed
        int row = jTableMateria.getSelectedRow(); //Esto me indica el numero de la fila seleccionado
        if (row==-1) {
            JOptionPane.showMessageDialog(this, "Porfavor seleccione una fila de la Tabla");
        } else {
            int id = (int) jTableMateria.getValueAt(row, 0);
            materiaData.borrarMateria(id);
            borrarFilasTablas();
            cargarFilas();
            limpiarCampos();
        }
        
    }//GEN-LAST:event_jbBorrarActionPerformed

    private void jTableMateriaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableMateriaMouseClicked
        int row = jTableMateria.getSelectedRow(); //Esto me indica el numero de la fila seleccionado
       
            int id = (int) jTableMateria.getValueAt(row, 0);
            String nombre =(String) jTableMateria.getValueAt(row, 1);
            String descripcion =(String) jTableMateria.getValueAt(row, 2);
            String estadoString = (String) jTableMateria.getValueAt(row, 3);
            boolean estado = estadoString.equals("Activo"); 
                       
            jtNombre.setText(nombre);
            jtDescripcion.setText(descripcion);           
            if (estado) {
                jcbEstado.setSelected(true);
            } else {
                jcbEstado.setSelected(false);
            }
           
        
    }//GEN-LAST:event_jTableMateriaMouseClicked

    private void jbActualzarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbActualzarActionPerformed
        int row = jTableMateria.getSelectedRow(); //Esto me indica el numero de la fila seleccionado
        if (row==-1) {
            JOptionPane.showMessageDialog(this, "Porfavor seleccione una fila de la Tabla");
        } else {
            int id = (int) jTableMateria.getValueAt(row, 0);
            String nombre = jtNombre.getText();
            String descripcion = jtDescripcion.getText();
            boolean estado = jcbEstado.isSelected();
            Materia materia = new Materia(id, nombre, descripcion, estado);
            materiaData.actualizarMateria(materia);
            borrarFilasTablas();
            cargarFilas();
            limpiarCampos();
        }
          
    }//GEN-LAST:event_jbActualzarActionPerformed

    private void jbSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSalirActionPerformed
       this.dispose();
    }//GEN-LAST:event_jbSalirActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableMateria;
    private javax.swing.JButton jbActualzar;
    private javax.swing.JButton jbBorrar;
    private javax.swing.JButton jbGuardar;
    private javax.swing.JButton jbSalir;
    private javax.swing.JCheckBox jcbEstado;
    private javax.swing.JTextField jtDescripcion;
    private javax.swing.JTextField jtNombre;
    // End of variables declaration//GEN-END:variables
 private DefaultTableModel modelo = new DefaultTableModel(){
        public boolean isCellEditable(int fila, int columna){
            return false;
        }
    };
    private void armarTabla(){
        modelo.addColumn("ID Materia");
        modelo.addColumn("Nombre");
        modelo.addColumn("Descripcion");
        modelo.addColumn("Estado");       
        jTableMateria.setModel(modelo);
    }
      private void cargarFilas() {
        for (Materia listaMateria : materiaData.obtenerMaterias()) {
            modelo.addRow(new Object[]{
                listaMateria.getId_materia(),
                listaMateria.getNombre(),
                listaMateria.getDescripción(),
                listaMateria.isEstado() ? "Activo" : "No Activo"                         
            });
        }    
    }
      private void borrarFilasTablas(){
        int fila= modelo.getRowCount()-1;
        for (int i = fila ; i >= 0 ; i--) {
            modelo.removeRow(i);
        }
    }
      private void limpiarCampos(){
          jtNombre.setText("");
          jtDescripcion.setText("");
          jcbEstado.setSelected(false);
      }
}
